(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"./list/reduce.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),r=a.n(t),o=a("./node_modules/@mdx-js/tag/dist/index.js");function m(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}n.default=function(e){var n=e.components;m(e,["components"]);return r.a.createElement(o.MDXTag,{name:"wrapper",components:n},r.a.createElement(o.MDXTag,{name:"h1",components:n,props:{id:"listreduce"}},"list/reduce"),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"reduce :: Function -> Any -> Iterable")),r.a.createElement(o.MDXTag,{name:"p",components:n},"Returns a single item by iterating through the list, successively calling the iterator function and passing it an accumulator value and the current value from the array, and then passing the result to the next call."),r.a.createElement(o.MDXTag,{name:"p",components:n},"An ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Iterable")," could be an ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Array"),", an ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Iterator"),", or ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"async Iterator"),", or a ",r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Functor"),"."),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"array-example"}},"Array Example"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript",metaString:""}},"import reduce from 'mojiscript/list/reduce'\n\nconst add = x => y => x + y\nconst array = [ 1, 2, 3 ]\n\nreduce (add) (0) (array) //=> 6\n")),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"iterator-example"}},"Iterator Example"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript",metaString:""}},"import range from 'mojiscript/list/range'\nimport reduce from 'mojiscript/list/reduce'\n\nconst add = x => y => x + y\n\nreduce (add) (0) (range (1) (4)) //=> 6\n")),r.a.createElement(o.MDXTag,{name:"h1",components:n,props:{id:"async-example"}},"Async Example"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript",metaString:""}},"import pipe from 'mojiscript/core/pipe'\nimport reduce from 'mojiscript/list/reduce'\nimport sleep from 'mojiscript/threading/sleep'\n\nconst add = x => y => x + y\nconst asyncAdd = x => pipe ([\n  sleep (1000),\n  add (x)\n])\n\nconst array = [ 1, 2, 3 ]\n\nreduce (asyncAdd) (0) (array) //=> Promise ([ 2, 4, 6 ])\n")))}}}]);