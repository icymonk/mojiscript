(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{"./list/reduceWhile.mdx":function(e,n,t){"use strict";t.r(n);var a=t("./node_modules/react/index.js"),r=t.n(a),o=t("./node_modules/@mdx-js/tag/dist/index.js");function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}n.default=function(e){var n=e.components;c(e,["components"]);return r.a.createElement(o.MDXTag,{name:"wrapper",components:n},r.a.createElement(o.MDXTag,{name:"h1",components:n,props:{id:"listreducewhile"}},"list/reduceWhile"),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"reduceWhile :: Predicate -> Function -> Any -> Iterable")),r.a.createElement(o.MDXTag,{name:"p",components:n},"Returns a single item by iterating through the list, successively calling the iterator function and passing it an accumulator value and the current value from the array, and then passing the result to the next call. For each iteration, check the predicate function. If the predicate is true, run the current iteration. If false, return the current accumulator."),r.a.createElement(o.MDXTag,{name:"p",components:n},"The predicate will be"),r.a.createElement(o.MDXTag,{name:"p",components:n},r.a.createElement(o.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"predicate :: Any -> Any -> Boolean")),r.a.createElement(o.MDXTag,{name:"h2",components:n,props:{id:"example"}},"Example"),r.a.createElement(o.MDXTag,{name:"pre",components:n},r.a.createElement(o.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript",metaString:""}},"import log from 'mojiscript/console/log'\nimport pipe from 'mojiscript/core/pipe'\nimport run from 'mojiscript/core/run'\nimport range from 'mojiscript/list/range'\nimport reduceWhile from 'mojiscript/list/reduceWhile'\n\nconst add = x => y => x + y\nconst predicate = acc => x => acc <= 2\n\nconst main = pipe ([\n  range (1) (Infinity),    //=> [ 1, 2, 3 ]\n  reduceWhile (predicate) (add) (0), //=> 3\n  log\n])\n\nrun ({ main })\n//=> 3\n")))}}}]);