(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"./list/reduceWhile.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),r=a.n(t),c=a("./node_modules/@mdx-js/tag/dist/index.js");function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},c=Object.keys(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)a=c[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}n.default=function(e){var n=e.components;o(e,["components"]);return r.a.createElement(c.MDXTag,{name:"wrapper",components:n},r.a.createElement(c.MDXTag,{name:"h1",components:n,props:{id:"listreducewhile"}},"list/reduceWhile"),r.a.createElement(c.MDXTag,{name:"p",components:n},r.a.createElement(c.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"reduceWhile :: Predicate -> Function -> Any -> Iterable")),r.a.createElement(c.MDXTag,{name:"p",components:n},"Returns a single item by iterating through the list, successively calling the iterator function and passing it an accumulator value and the current value from the array, and then passing the result to the next call. For each iteration, check the predicate function. If the predicate is true, run the current iteration. If false, return the current accumulator."),r.a.createElement(c.MDXTag,{name:"p",components:n},"An ",r.a.createElement(c.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Iterable")," could be an ",r.a.createElement(c.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Array"),", an ",r.a.createElement(c.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Iterator"),", or ",r.a.createElement(c.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"async Iterator"),", or a ",r.a.createElement(c.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"Functor"),"."),r.a.createElement(c.MDXTag,{name:"p",components:n},"The predicate will be ",r.a.createElement(c.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"predicate :: Any -> Any -> Boolean")),r.a.createElement(c.MDXTag,{name:"h2",components:n,props:{id:"array-example"}},"Array Example"),r.a.createElement(c.MDXTag,{name:"pre",components:n},r.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript",metaString:""}},"import reduceWhile from 'mojiscript/list/reduceWhile'\n\nconst add = x => y => x + y\nconst array = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\nconst predicate = acc => x => x < 5\n\nreduceWhile (predicate) (add) (0) (array) //=> 10\n")),r.a.createElement(c.MDXTag,{name:"h2",components:n,props:{id:"iterator-example"}},"Iterator Example"),r.a.createElement(c.MDXTag,{name:"pre",components:n},r.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript",metaString:""}},"import range from 'mojiscript/list/range'\nimport reduceWhile from 'mojiscript/list/reduceWhile'\n\nconst add = x => y => x + y\nconst predicate = acc => x => x < 5\n\nreduceWhile (predicate) (add) (0) (range (0) (Infinity)) //=> 10\n")),r.a.createElement(c.MDXTag,{name:"h2",components:n,props:{id:"async-example"}},"Async Example"),r.a.createElement(c.MDXTag,{name:"pre",components:n},r.a.createElement(c.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-javascript",metaString:""}},"import pipe from 'mojiscript/core/pipe'\nimport reduceWhile from 'mojiscript/list/reduceWhile'\nimport sleep from 'mojiscript/threading/sleep'\n\nconst add = x => y => x + y\nconst asyncAdd = x => pipe ([\n  sleep (1000),\n  add (x)\n])\nconst array = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\nconst predicate = acc => x => x < 5\n\nreduceWhile (predicate) (asyncAdd) (0) (array) //=> Promise (10)\n")))}}}]);